<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xmlns:cxfcore="http://cxf.apache.org/core"
    xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
    xmlns:jaxrs="http://cxf.apache.org/jaxrs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd             http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd              http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd     ">
    <!--
      The namespace for the camelContext element in Blueprint is 'https://camel.apache.org/schema/blueprint'. Additionally,
    fe  we can also define namespace prefixes we want to use them in the XPath expressions in our CBR.

      While it is not required to assign id's to the <camelContext/> and <route/> elements, it is a good idea
      to set those for runtime management purposes (logging, JMX MBeans, ...)
    -->
    <!-- to setup camel servlet with OSGi HttpService -->
    <bean
        class="org.apache.camel.component.servlet.CamelHttpTransportServlet" id="camelServlet"/>
    <bean class="com.smtp.webservice.GlccValidationImpl" id="serviceClass"/>
    <camelContext id="glCodecombinations" xmlns="http://camel.apache.org/schema/blueprint">
        <restConfiguration apiContextListing="true"
            apiContextPath="api-docs" bindingMode="json"
            component="jetty" contextPath="smtp-om/api/v1"
            enableCORS="true" port="9090">
            <!-- we want json output in pretty mode -->
            <dataFormatProperty key="prettyPrint" value="true"/>
            <!-- setup swagger api descriptions -->
            <apiProperty key="base.path" value="api/v1"/>
            <apiProperty key="host" value="localhost:9090"/>
            <apiProperty key="api.version" value="1.2.3"/>
            <apiProperty key="swagger.version" value="1.0"/>
            <apiProperty key="api.title" value="Code Combination Services"/>
            <apiProperty key="api.description" value="API to support management of GL Code Entry"/>
            <apiProperty key="api.contact.name" value="MTICS"/>
        </restConfiguration>
        <!-- defines the rest services using the context-path /user -->
        <rest consumes="application/json" path="/glCodecombinations" produces="application/json">
            <description>Validates GL Code combinations</description>
            <!-- this is a rest GET to view an user by the given id -->
            <get outType="com.smtp.webservice.GlccValidationResponse" uri="/{cc}">
                <description>Validates a Specific GL Code Combination</description>
                <param dataType="String"
                    description="5 segment code combination (aaa.bbb.ccc.ddd.eee)"
                    name="cc" type="path"/>
                <responseMessage message="The Valid Code Combination that was found"/>
                <to id="_to1" uri="bean:serviceClass?method=getGlcc(${header.cc})"/>
            </get>
        </rest>
    </camelContext>
</blueprint>
